###############################################################################
#                                                                             #
#              Database for LairdTech PR-59 RS-232 serial device              #
#                                                                             #
#                              MAIN                                           #
#                                                                             #
###############################################################################

# asyn record for interactive communication with PR59
record(asyn, "$(P)$(R)SerialAsyn") {
    field(PORT,  "$(SERIAL_PORT)")
    field(IMAX, "256")
    field(OMAX, "256")
}

# status message 
record(waveform, "$(P)$(R)StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "512")
    field(SCAN, "I/O Intr")
}

# command: $LI - get board info and id name
record(waveform, "$(P)$(R)ID_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_ID")
    field(FTVL, "CHAR")
    field(NELM, "512")
    field(PINI, "YES")
}

# command: $V - get software version
record(waveform, "$(P)$(R)Version_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_VERSION")
    field(FTVL, "CHAR")
    field(NELM, "512")
    field(PINI, "YES")
}

# command: $S - status flags (alarms and errors)
record(waveform, "$(P)$(R)Status_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_STATUS")
    field(FTVL, "CHAR")
    field(NELM, "512")
    field(PINI, "YES")
}

# clear status flag
record(bo, "$(P)$(R)StatusClear")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asynMask($(PORT),$(ADDR),$(TIMEOUT))LT_STATUS_CLEAR")
    field(FLNK, "$(P)$(R)Status_RBV")
}

# clear/set RUN flag
record(bo, "$(P)$(R)StartStop")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asynMask($(PORT),$(ADDR),$(TIMEOUT))LT_START_STOP")
    field(ZNAM, "Stop")
    field(ONAM, "Start")
}
record(bi, "$(P)$(R)StartStop_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asynMask($(PORT),$(ADDR),$(TIMEOUT))LT_START_STOP")
    field(ZNAM, "Idle")
    field(ONAM, "Running")
    field(SCAN, "I/O Intr")
}

# write regulator register values to EEPROM (saved across power cycle)
record(bo, "$(P)$(R)WriteEEPROM")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asynMask($(PORT),$(ADDR),$(TIMEOUT))LT_WRITE_EEPROM")
}

# clear EEPROM to default, and reboot the regulator
record(bo, "$(P)$(R)ClearEEPROM")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asynMask($(PORT),$(ADDR),$(TIMEOUT))LT_CLEAR_EEPROM")
}

# commands: $A, $A1 .. $A8 - continuous logging
record(mbbo, "$(P)$(R)LoggingMode")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asynMask($(PORT),$(ADDR),$(TIMEOUT))LT_LOGGING_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "A/D values")
    field(ONVL, "1")
    field(TWST, "Global values")
    field(TWVL, "2")
    field(THST, "PID values")
    field(THVL, "3")
    field(FRST, "Temp. values")
    field(FRVL, "4")
    field(FVST, "Regulator input")
    field(FVVL, "5")
    field(SXST, "Runtime data")
    field(SXVL, "6")
    field(SVST, "Runtime IEEE754")
    field(SVVL, "7")
    field(EIST, "Runtime LOGG")
    field(EIVL, "8")
    field(VAL,  "0")
    field(PINI, "YES")
}
record(mbbi, "$(P)$(R)LoggingMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asynMask($(PORT),$(ADDR),$(TIMEOUT))LT_LOGGING_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "A/D values")
    field(ONVL, "1")
    field(TWST, "Global values")
    field(TWVL, "2")
    field(THST, "PID values")
    field(THVL, "3")
    field(FRST, "Temp. values")
    field(FRVL, "4")
    field(FVST, "Regulator input")
    field(FVVL, "5")
    field(SXST, "Runtime data")
    field(SXVL, "6")
    field(SVST, "Runtime IEEE754")
    field(SVVL, "7")
    field(EIST, "Runtime LOGG")
    field(EIVL, "8")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

##############################################################################
# status alarm bits
##############################################################################
record(bi, "$(P)$(R)StatusAlarmTemp1TooHigh_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x1,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp1TooLow_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x2,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp1Short_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x4,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp1Missing_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x8,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp2TooHigh_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x10,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp2TooLow_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x20,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp2Short_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x40,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp2Missing_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x80,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp3TooHigh_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x100,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp3TooLow_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x200,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp3Short_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x400,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp3Missing_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x800,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp4TooHigh_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x1000,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp4TooLow_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x2000,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp4Short_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x4000,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusAlarmTemp4Missing_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x8000,$(TIMEOUT))LT_STATUS_ALARM")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

##############################################################################
# status error bits
##############################################################################
record(bi, "$(P)$(R)StatusErrorStartupDelay_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x1,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorDownloadError_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x2,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorCritial_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x4,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorRegulatorOverload_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x8,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorHighVoltage_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x10,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorLowVoltage_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x20,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorHigh12V_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x40,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorLow12V_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x80,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorCurrentHigh_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x100,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorCurrentLow_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x200,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorFan1High_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x400,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorFan1Low_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x800,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorFan2High_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x1000,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorFan2Low_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x2000,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorSensorAlarmStop_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x4000,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
record(bi, "$(P)$(R)StatusErrorSensorAlarmIndicator_RBV") {
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x8000,$(TIMEOUT))LT_STATUS_ERROR")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

##############################################################################
# regulator parameters
##############################################################################
record(mbbo, "$(P)$(R)Mode")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask($(PORT),$(ADDR),0xF,$(TIMEOUT))LT_MODE")
    field(ZRST, "Off")
    field(ZRVL, "0")
    field(ONST, "Power")
    field(ONVL, "1")
    #field(TWST, "Algo")
    #field(TWVL, "2")
    field(THST, "P")
    field(THVL, "3")
    field(FRST, "PI")
    field(FRVL, "4")
    field(FVST, "PD")
    field(FVVL, "5")
    field(SXST, "PID")
    field(SXVL, "6")
}
record(mbbi, "$(P)$(R)Mode_RBV")
{
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0xF,$(TIMEOUT))LT_MODE")
    field(ZRST, "Off")
    field(ZRVL, "0")
    field(ONST, "Power")
    field(ONVL, "1")
    #field(TWST, "Algo")
    #field(TWVL, "2")
    field(THST, "P")
    field(THVL, "3")
    field(FRST, "PI")
    field(FRVL, "4")
    field(FVST, "PD")
    field(FVVL, "5")
    field(SXST, "PID")
    field(SXVL, "6")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)ModeFlags")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask($(PORT),$(ADDR),0x3F0,$(TIMEOUT))LT_MODE_FLAGS")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "TrExtSelect")
    field(ONVL, "1")
    field(TWST, "TcPowerInt")
    field(TWVL, "2")
    field(THST, "SendParams")
    field(THVL, "4")
    field(FRST, "Autostart")
    field(FRVL, "8")
    field(FVST, "LoopMode")
    field(FVVL, "16")
    field(SXST, "InvertOutput")
    field(SXVL, "32")
}
record(mbbi, "$(P)$(R)ModeFlags_RBV")
{
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x3F0,$(TIMEOUT))LT_MODE_FLAGS")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "TrExtSelect")
    field(ONVL, "1")
    field(TWST, "TcPowerInt")
    field(TWVL, "2")
    field(THST, "SendParams")
    field(THVL, "4")
    field(FRST, "Autostart")
    field(FRVL, "8")
    field(FVST, "LoopMode")
    field(FVVL, "16")
    field(SXST, "InvertOutput")
    field(SXVL, "32")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)FilterA")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask($(PORT),$(ADDR),0x3000,$(TIMEOUT))LT_FILTER_A")
    field(ZRST, "Off")
    field(ZRVL, "0")
    field(ONST, "Multiply")
    field(ONVL, "1")
    field(TWST, "Linear")
    field(TWVL, "2")
    field(THST, "Lead/lag")
    field(THVL, "3")
}
record(mbbi, "$(P)$(R)FilterA_RBV")
{
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0x3000,$(TIMEOUT))LT_FILTER_A")
    field(ZRST, "Off")
    field(ZRVL, "0")
    field(ONST, "Multiply")
    field(ONVL, "1")
    field(TWST, "Linear")
    field(TWVL, "2")
    field(THST, "Lead/lag")
    field(THVL, "3")
    field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)FilterB")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask($(PORT),$(ADDR),0xC000,$(TIMEOUT))LT_FILTER_B")
    field(ZRST, "Off")
    field(ZRVL, "0")
    field(ONST, "Multiply")
    field(ONVL, "1")
    field(TWST, "Linear")
    field(TWVL, "2")
    field(THST, "Lead/lag")
    field(THVL, "3")
}
record(mbbi, "$(P)$(R)FilterB_RBV")
{
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),$(ADDR),0xC000,$(TIMEOUT))LT_FILTER_B")
    field(ZRST, "Off")
    field(ZRVL, "0")
    field(ONST, "Multiply")
    field(ONVL, "1")
    field(TWST, "Linear")
    field(TWVL, "2")
    field(THST, "Lead/lag")
    field(THVL, "3")
    field(SCAN, "I/O Intr")
}

# register 0
record(ao, "$(P)$(R)TrSetPoint")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TR_SET_POINT")
    field(SCAN, "Passive")
}
record(ai, "$(P)$(R)TrSetPoint_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TR_SET_POINT")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 6
record(ao, "$(P)$(R)TcLimit")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_LIMIT")
    field(SCAN, "Passive")
}
record(ai, "$(P)$(R)TcLimit_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_LIMIT")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 7
record(ao, "$(P)$(R)TcDeadBand")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_DEADBAND")
    field(SCAN, "Passive")
}
record(ai, "$(P)$(R)TcDeadBand_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_DEADBAND")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 9
record(longin, "$(P)$(R)SampleRate_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_SAMPLE_RATE")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 10
record(ao, "$(P)$(R)TcCoolGain")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_COOL_GAIN")
    field(SCAN, "Passive")
    field(PINI, "YES")
}
record(ai, "$(P)$(R)TcCoolGain_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_COOL_GAIN")
    field(SCAN, "I/O Intr")
}

# register 11
record(ao, "$(P)$(R)TcHeatGain")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_HEAT_GAIN")
    field(SCAN, "Passive")
}
record(ai, "$(P)$(R)TcHeatGain_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_HEAT_GAIN")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 99
record(longin, "$(P)$(R)EventCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_EVENT_COUNTER")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 105
record(ai, "$(P)$(R)TRef_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TREF")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 106
record(ai, "$(P)$(R)TcOutput_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_TC_OUTPUT")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 150
record(ai, "$(P)$(R)InputVoltage_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_INPUT_VOLTAGE")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 151
record(ai, "$(P)$(R)Internal12V_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_INTERNAL_VOLTAGE")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

# register 152
record(ai, "$(P)$(R)MainCurrent_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LT_MAIN_CURRENT")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
}
